#Random is for the selection of what item will be hidden, as well as where.
import random

#Game_Control is where the game pieces are registered, namely 
class Game_Control:
    def __init__(self):
        self.begin = True

#Item_get is what decides the item that needs to be found
    def item_get(self):
        item = ["book", "teddy bear", "water bottle", "lunch box", "sweater", "phone", "camera", "pen", "keys", "purse", "wallet", "small container", "ball", "earbuds"]
        global key #key is meant to be global to be passed around the different classes.
        key = random.choice(item)
        return

#Hiding_spot is what decides where the item is hidden
    def hiding_spot(self):
        spot = ["shelf", "box", "bucket", "floor", "cupboard", "table", "counter"]
        global place #place is meant to be global to be passed around the different classes.
        place = random.choice(spot)
        return

#Game_start is basically a connector, that kinda sets the code in motion. It also should allow 'key' and 'place' to be transferred to other classes.
    def game_start(self):
        View = Overlay(key, place)
        if self.begin == True:
            View.main_screen(key, place)
        return

#space_saver is an intermediary that allows the player to continuously utilize both interact and talk. It was previously part of functions option_1 and option_2, but this was created to cut down their size. It practically works as a while statement, allowing the two codes to be looped as long as the player hasn't found the item.
    def space_saver(self):
        map_map = Overlay(key, place)
        inquiry = input("""Do you want the 'map' visuals to be shown on the screen again? Yes or No
""")
        while inquiry.lower() != "yes" and inquiry.lower() != "no":
            inquiry = input("""Please try again.
""")
        if inquiry.lower() == "yes":
            map_map.main_screen(key, place)
        if inquiry.lower() == "no":
            map_map.option(key, place)

#The second class I think will call Selection, since it is mainly where all interactions will be at. This will give objects you select their own unique interaction, and people who can give hints.

class Selection:
    def __init__(self, key, place):
        self.key = key
        self.place = place
    
    #Interact is the first game option in the game, and ultimately what is utilized to win. The player 

    def interact(self, key, place):
        setting = Game_Control()
        map_map = Overlay(key, place)
        observe = input("""Where are you looking?
Your options are:
    Shelf
    Box
    Bucket
    Floor
    Cupboard
    Table
    Counter
Please type the area you wish to search
""")
        while observe.lower() != "shelf" and observe.lower() != "box" and observe.lower() != "bucket" and observe.lower() != "floor" and observe.lower() != "cupboard" and observe.lower() != "table" and observe.lower() != "counter":
            observe = input("""Could you try that again?
""")
        if observe.lower() == "shelf":
            if place == "shelf":
                map_map.winnings()
            else:
                print("""You look at the shelf. You see various things that have ended up here today, but none are what you're looking for.
""")
                setting.space_saver()
        if observe.lower() == "box":
            if place == "box":
                map_map.winnings()
            else:
                print("""Looking in the box, you see things varying from game cards to chargers. Nothing you're looking for, though.
""")
                setting.space_saver()
        if observe.lower() == "bucket":
            if place == "bucket":
                map_map.winnings()
            else:
                print("""You've always believed the bucket held many mysteries - but said mysteries are not the answer to the riddle before you right now.
""")
                setting.space_saver()
        if observe.lower() == "floor":
            if place == "floor":
                map_map.winnings()
            else:
                print("""Nothing seems to have fallen off the table, and the floor itself has been recently cleaned. Nice!
""")
                setting.space_saver()
        if observe.lower() == "cupboard":
            if place == "cupboard":
                map_map.winnings()
            else:
                print("""Sometimes you wish there were actual cups in here. Then again, it might be a kitchen if it had cups and the like in the cupboard.
""")
                setting.space_saver()
        if observe.lower() == "table":
            if place == "table":
                map_map.winnings()
            else:
                print("""The table has always been a little cluttered, but no matter how many things you've found here in the past, it doesn't seem to be here today.
""")
                setting.space_saver()
        if observe.lower() == "counter":
            if place == "counter":
                map_map.winnings()
            else:
                print("""The bucket is up here, but nothing else, really.
""")
                setting.space_saver()

#Talk allows you to figure out what you're looking for. While this portion is technically completely optional, I did think that it would give a little personality and purpose to the game.
    def talk(self, key):
        setting = Game_Control()
        if key == "book":
            print("I'm looking for a book. I set it down and forgot about it, and when I went back to get it, it was gone. Do you have the book I'm looking for?")
            setting.space_saver()
        if key == "teddy bear":
            print("Excuse me, have you seen my teddy bear? Someone took it from me, and I'm kinda hoping it's here.")
            setting.space_saver()
        if key == "water bottle":
            print("I'm wondering if you got a hold on a water bottle recently? My friend dropped it and we've been looking since.")
            setting.space_saver()
        if key == "lunch box":
            print("I'm looking for my lunch box! It's super cool, and has a picture of space on it! Mom said that since I couldn't find it anywhere else, I might be able to find it here. Please say you can find it!")
            setting.space_saver()
        if key == "sweater":
            print("Has a sweater been dropped in here recently? I... kind of lost it while I was walking and didn't realize it.")
            setting.space_saver()
        if key == "phone":
            print("Have any phones ended up here? I really need to head back home, and I call my dad to do it, and... I lost my phone. Could you please check?")
            setting.space_saver()
        if key == "camera":
            print("I swear I just had to lose my camera right when I was going to take the perfect picture! Did it end up here?")
            setting.space_saver()
        if key == "pen":
            print("You don't happen to have a pen lying around, do you? I kinda lost mine... it was really special too.")
            setting.space_saver()
        if key == "keys":
            print("I'm looking for my keys. Can't get home without them, you know!... Yeah... just trying to be optimistic.")
            setting.space_saver()
        if key == "purse":
            print("Have you seen my purse? It's not one of those big ones, but it has some of my important things in it.")
            setting.space_saver()
        if key == "wallet":
            print("Hi, I'm wondering if my wallet ended up here? I'm mainly checking because otherwise it was probably stolen.")
            setting.space_saver()
        if key == "small container":
            print("It just had to be the day I lost the dessert for the birthday boy... Hey, have you seen a small container in here? You'd make a child's day in finding it.")
            setting.space_saver()
        if key == "ball":
            print("I lost my ball! Could you help me find it?")
            setting.space_saver()
        if key == "earbuds":
            print("I lost my earbuds... again. Did they end up here? I don't really want to get new ones.")
            setting.space_saver()


#The third class will be Overlay, and will mianly subside of text pictures that can be brought up to show what/who you can interact with, and how.
class Overlay:
    def __init__(self, key, place):
        self.key = key
        self.place = place

#main screen is a basic map that gives visuals, and also gives the opening select between interact and talk.
    def main_screen(self, key, place):
        Choice = Selection(key, place)
        room = input(r"""                                                                             ____________________
    |                            |                                          /___________________/|
 |  |____________________________|                                          |  ______________  | |
 | /                          | /|                                          |  |            |  | |
 |/___________________________|/ |                                          |  |            |  | |
 |  |                         |  |                                          |  |          [ |  | |
 |  |                         |  |                                          |  |            |  | |
 |  |_________________________|__|                                          |  |____________|  | |
 | /                          | /|                              _______     |__________________|/
 |/___________________________|/ |                             [_______]
 |  |                         |  |                             |  O   ||
 |  |                         |  |                         ____|   \__L|_________________________
 |  |_________________________|__|                        /    |______||                        /|
 | /                          | /|                       /                                     / |
 |/___________________________|/ |                      /_____________________________________/ /|
 |  |                         |  |                      |_____________________________________|/ |
 |  |                      ___|__|_______________________|_______                             |  |
 |  |_____________________/                                     /|_________________________   |  |
 | /                     /                                     / /         |              |   |  |
 |/_____________________/                                     / /|       [ | ]            |   |  |
 |  O____________      /_____________________________________/ / |         |              |   |  |
 O  /          / |     |_____________________________________|/| |         |              |   |  |
   /__________/  |     | | | |                             | |_| |_________|______________|   | /
  |   _____   |  |     | | | |                             | |_| |____________________________|/
  |   \___/   |  |     | | |_|                             | | |_|
  |           |  |     | |                                 | |
  |           | /      | |                                 | |
  |___________|/       |_|                                 |_|
 ___________________________________________________________________________________________________
|                                Please Type one of these keywords:                                 |
|                      INTERACT                                     TALK                            |
|___________________________________________________________________________________________________|
""")
        while room.lower() != "interact" and room.lower() != "talk":
            room = input("""Please type either 'interact' or 'talk'.
""")
        if room.lower() == "interact":
            Choice.interact(key, place)
        if room.lower() == "talk":
            Choice.talk(key)

#option is basically the same as main_screen, only the bottom portion. I made this to make it easier to scroll up to check the main one, without multiple different versions clogging each of the attempts. Hopefully should make it easier to navigate the game!
    def option(self, key, place):
        Choice = Selection(key, place)
        screens = input(r""" ___________________________________________________________________________________________________
|                                Please Type one of these keywords:                                 |
|                      INTERACT                                     TALK                            |
|___________________________________________________________________________________________________|
""")
        while screens.lower() != "interact" and screens.lower != "talk":
            screens = input("""Please type either 'interact' or 'talk'.
""")
        if screens.lower() == "interact":
            Choice.interact(key, place)
        if screens.lower() == "talk":
            Choice.talk(key)

    def winnings(self):
        setting = Game_Control()
        print(r""" _______________________________________________
/                                               \
\    *                                      *   /
/             *                       X         \
\       X            YOU                        /
/                    WIN!           *           \
\      *                                 *      /
/                *            X                 \
\_______________________________________________/""")
        dilemma = input("""Do you want to play another round? Yes or No
""")
        while dilemma.lower() != "yes" and dilemma.lower() != "no":
            dilemma = input("""Could you try that again?
""")
        if dilemma.lower() == "yes":
            setting.item_get()
            setting.hiding_spot()
            setting.game_start()
        if dilemma.lower() == "no":
            print("Have a nice day!")

#I may add more classes or fuse some depending on how the game goes.

Title = input(r"""___       WELCOME TO:                                     __________                                    __
\  \  _______              ___        ____      ___   __  \   ______\                                   \ \
/  / / ___  /           __/  /__     /    \    /  /  /_/  /  /                                          / /
\  \ \ \  \ \   _______ \__   __\    \  \  \   \  \       \  \_____  _______  __   __  __ ___    ______ \ \
/  / / /  / /  / _____/   /  /       /  /\  \  /  /       /  _____/ / ___  / / /  / / / |/__ \  / ___  \| /
\  \ \ \__\ \  \ \___     \  \       \  \ \  \ \  \       \  \      \ \  \ \ \ \  \ \ \  /  \ \ \ \  \    \
/  / /______/   \___ \    /  /       /  /  \  \/  /       /  /      / /  / / / /  / / / /   / / / /  /    /
\  \________   _____\ \   \  \       \  \   \  \  \       \  \      \ \__\ \ \ \__\ \ \ \   \ \ \ \__\    \
/__________/  /_______/   /__/       /__/    \____/       /__/      /______/ /______/ /_/   /_/ /______/|_/

TYPE 'BEGIN' TO START
TYPE 'INFO' FOR EXTRA INFORMATION BEFORE YOU PLAY
""")

Hide = Game_Control()
while Title.lower() != "begin" and Title.lower() != "info":
    Title = input("""Try that again, please.
""")

if Title.lower() == "begin":
    Hide.item_get()
    Hide.hiding_spot()
    Hide.game_start()

if Title.lower() == "info":
    input("Welcome to Lost N' Found! In this game, you work at a lost and found booth and return items to their owners. When you find the object they're looking for, you win the game! Press ENTER to continue.")
    print("""You have two options to work with to find the missing object: Talk and Interact.
    Talk allows you to ask the someone what they're looking for. Sometimes it's nice to know what you're searching for before you start looking!
    Interact is the main function you will use while playing. Interact will give you a list of places to search in - and will allow you to select them as well.""")
    Asked = input("""Type 'BEGIN' to start!""")
    while Asked.lower() != "begin":
        Asked = input("""Please type 'BEGIN' to Start!
""")
    if Asked.lower() == "begin":
        Hide.item_get()
        Hide.hiding_spot()
        Hide.game_start()